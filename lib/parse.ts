/**
 * @copyright Sister Software
 * @license AGPL-3.0
 * @author Teffen Ellis, et al.
 */

import { parse as _parse } from "node:path"
import { type PluckBasename } from "./basename.js"
import { type PluckDirname } from "./dirname.js"
import { PluckBaseFileName, PluckFileExtension } from "./extname.js"
import type { format } from "./format.js"
import { PathBuilder } from "./path-builder.js"

/**
 * Returns an object from a path string - the opposite of format().
 *
 * @param path Path to evaluate.
 *
 * @returns A parsed path object.
 * @throws {TypeError} If path is not a string or {@linkcode PathBuilder}.
 * @see {@linkcode ParsedPath} for the object returned.
 */
export function parse<T extends PathBuilder | string>(
	path: T
): T extends PathBuilder<infer U> ? ParsedPath<U> : T extends string ? ParsedPath<T> : never {
	return _parse(path.toString()) as any
}

/**
 * Pluck the root of a path.
 */
export type PathRoot<T extends string> = T extends `/${string}`
	? "/"
	: T extends `${infer Root}:${string}`
		? `${Root}:`
		: ""

/**
 * A parsed path object generated by path.parse() or consumed by path.format().
 *
 * @see {@linkcode parse} to create a ParsedPath object.
 * @see {@linkcode format} to consume a ParsedPath object.
 */
export interface ParsedPath<T extends string> {
	/**
	 * The root of the path such as '/' or 'c:'
	 */
	root: PathRoot<T>
	/**
	 * The full directory path such as '/home/user/dir' or 'c:\path\dir'
	 */
	dir: PluckDirname<T>
	/**
	 * The file name including extension (if any) such as 'index.html'
	 */
	base: PluckBasename<T>
	/**
	 * The file name without extension (if any) such as 'index'
	 */
	name: PluckBaseFileName<T>

	/**
	 * The file extension (if any) such as '.html'
	 */
	ext: PluckFileExtension<T>
}

export default parse
